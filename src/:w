#include"polynomial.h"
#include"Complex.h"
#include<vector>
#include<set>
#include<cmath>
#include<iostream>
using namespace std;

extern int max(int a,int b);
extern void prn(vector<Complex> v);

vector<Complex> get_coeff(polynomial p)
{
	vector<Complex> out;
	int n=p.get_degree();
	for(int i=0;i<n ; i++)
	{
		out.push_back( Complex(p.get_coeff(i),0) );
	}
	return out;
}

static int level=0;

vector<Complex> recur_FFT(vector<Complex> a)
{
	level++;
	vector<Complex> out;
	out.resize(a.size(),Complex(0.0,0.0));
	int i;
	if( a.size() == 1 )   // if only the constatn element
	{
		out.push_back(a[0]);
		level--;
		return out;
	}
	Complex omega_n( cos( 2*M_PI/a.size() ),sin( 2*M_PI/a.size() ) );
	Complex omega( 1,0 );
	vector<Complex> a0,a1;
	for( int i=0; i<a.size(); i++)
	{
		if( (i%2)== 0 )
			a0.push_back(a[i]);
		else
			a1.push_back(a[i]);
	}
	cout<<level<<"  SIZES : "<<a.size()<<"\t"<<a0.size()<<"\t"<<a1.size()<<endl;
	vector<Complex> y0= recur_FFT(a0);
	vector<Complex> y1= recur_FFT(a1);
	cout<<level<<"  LEVEL"<<endl;
	cout<<level<<"  THIS: y0 :  "<<endl; prn(y0); cout<<"THIS_END : sz : "<<y0.size()<<endl;
	cout<<level<<"  THIS: y1 :  "<<endl; prn(y1); cout<<"THIS_END : sz : "<<y0.size()<<endl;
	cout<<level<<"  LEVEL END"<<endl<<endl;
	int k;
	for( k = 0 ; k< (a.size()/2-1) ; k++ )
	{
		out[k] = y0[k]+omega*y1[k];
		out[k+a.size()/2] = y0[k]-omega*y1[k];

		cout<<level<<"\t\t";out[k].print();cout<<endl;
		cout<<level<<"\t\t";out[k+a.size()/2].print(); cout<<endl;

		omega = omega*omega_n;
	}
	/*
	cout<<"A: "<<endl;
	prn(y);
	cout<<endl;
	*/
	level--;
	return out;
}


	
// multiply using the fast fourier transform method
polynomial multiply_fft(polynomial a,polynomial b)
{
	int n1=a.get_degree();
	int n2=b.get_degree();
	int n=max(n1,n2)*2;

}
